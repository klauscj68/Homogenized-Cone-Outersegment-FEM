% Programma per la soluzione del problema omogeneizzato della diffusione dei secondi messaggeri 
% nel cytosol del bastoncello con incisure (problema della fototrasduzione)
% Code for solving the homogenized problem of cytosol diffusion of second messengers 
% of rod with incisures (fototransduction problem)
function main_cyto(p_3d,f_3d,pr_3d)

% % % profile on

% % % % pulizia
% % % % cleaning
 close all;
 clc
% aggiunge alla path i file comuni, gli elementi, ed il problema sul disco
%path('../common',path);
%path('../elements',path);
%path('../id',path);

% legge i dati
[ R_b,R_t,H,theta_in,theta_fin,epsilon_0,nu,sigma,n_chambers,...
           dz_0,n_sd,Z_sd,flag_geom_sp, ...
           taglia,n_sez,tol_R,tol_angle,n_ref_cyto,n_ref_id,...
           metodo_cyto,...
           flag_model,flag_model_disc,...
           cc_R_st, D_R_st, cc_G_st, D_G_st, cc_E_st, D_E_st,...
           n_step_R,mu,lambda,nu_RE,nu_RG,...
           k_E, k_GE, PDE_s, mode_time, mode_space, n_sample,...
           n_Phi, Phi,...
           norma_inf,...
           peak_delta,...
           plot_niagara, plot_pool, inspect,...
           t_fin, n_step_t, metodo_id, solver, downsample,...
           u_tent,v_tent,tol_stat,...
           theta, alpha, tol_fix,...
           beta_dark,k_st, B_ca, F, f_ca,...
           cc_u,kk_u,cc_v,kk_v,...
           alpha_max,alpha_min,m_cyc,k_cyc,...
           j_cg_max,m_cg,K_cg,...
           j_ex_sat,K_ex,...
           flag_Ca_clamp] = data;

% costruisce la mesh
% mesh construction
%[n_pd, n_int_pd, n_tri, n_sl, n_fo,  ...
%         sl2pd, fo2pd, pd2int_pd, p_pd, t_pd, ...
%         ~, ~, ~, ~, ~, ...
%         ~, ~, ~, ~, ~, ...
%         Z_s, sd2sez, z_scaling]=...
%     genemesh(R_b, R_t, H, theta_in, theta_fin, n_sez, flag_geom_sp, dz_0, ...
%     n_sd, Z_sd, ...
%     taglia, tol_R, tol_angle, n_ref_cyto, n_ref_id, ...
%     plot_mesh, plot_num, inspect);


% gradi di libertà corrispondenti ai nodi del volume, dei dischi speciali, delle incisure, dell'outer shell
% degrees of freedom of the nodes in the volume, special discs, incisures, outer shell
%[n_gdl, gdl_vol, gdl_sd, gdl_sl, gdl_fo]=...
%    gdl(n_pd, n_int_pd, n_sl, n_fo, ...
%    n_sez, n_sd, ...
%    sl2pd, fo2pd, pd2int_pd, sd2sez, flag_model, inspect);

[ dof_vol,dof_sd, dof_sl, dof_fo, dof_ch,...
           dof_hd, dof_lc, dof_pan] = dof( p_3d,f_3d);

n_p3d = size(dof_vol,1);
% assembla le matrici globali e predispone per l'integrazione nel tempo
% del problema omogeneizzato
% In factor adjust assembla to delete whatever mass and
% stiffness matrices are unneeded to save memory.
[M_vol, M_fo,M_hd, M_lc, M_pan,M_sl, M_ch,...
    M_gl, K_gl,Sigma_cone,Sigma_sl,Sigma_hd,Volume_cone,...
    LL, UU, RR, p] =...
    factor(p_3d,f_3d,pr_3d,...
    n_p3d,...
    t_fin, n_step_t, metodo_cyto, theta, ...
    epsilon_0, nu, sigma, ...
    cc_u, kk_u, cc_v, kk_v);

% annullamento dei flussi al bordo per il calcolo della soluzione stazionaria
% steady-state solution computed by imposing vanishing boundary fluxes
% Used to be k_hyd instead of beta_dark, but I should have adapted it
% it now.
[u_ss,v_ss]=steady_state(Sigma_cone,Sigma_sl,Sigma_hd,Volume_cone,...
    nu, epsilon_0, ...
    beta_dark, PDE_s, alpha_max, alpha_min, m_cyc, k_cyc, ...
    B_ca, F, j_cg_max, f_ca, m_cg, K_cg, j_ex_sat, K_ex, ...
    u_tent, v_tent, tol_stat);
disp(['dark concentrations of cGMP and Ca   ',num2str(u_ss), 'uM,  ' num2str(v_ss) ' $uM']);



% legge E_st, densità di fosfodiesterasi per ogni campione aleatorio
% read E_st, PDE* density for every random sample
load('E_st');

% integrazione nel tempo del problema omogeneizzato di diffusione del cGMP e Ca2+ nel citosol
% time integration of the homogenized problem of diffusion of cGMP and Ca2+ in the cytosol
% beta_dark used to be k_hyd in Giovanni's code, but it doesn't matter
% bc that value is never used in my integrazione_tempo. M_sd is now M_hd
% also deleted call to flag_ch before B_ca
%M_ch = M_fo+M_sl;
M_ch = M_sl;

[~, sol, curr_tot]=integrazione_tempo(p_3d,f_3d,...
    R_b, R_t, H, theta_in,theta_fin, n_sez, n_sd, ...
    n_p3d, ...
    t_fin, n_step_t, downsample, ...
    metodo_cyto, solver, theta, alpha, tol_fix, norma_inf, flag_Ca_clamp, ...
    M_vol, M_hd, M_sl, M_fo, M_ch, M_gl, K_gl, LL, UU, RR, p, ...
    n_sample, ...
    epsilon_0, nu, ...
    beta_dark, PDE_s, k_st, ...
    alpha_max, alpha_min, m_cyc, k_cyc, ...flag_ch,
    B_ca, F, j_cg_max, f_ca, m_cg, K_cg, ...
    j_ex_sat, K_ex, ...
    u_ss, v_ss, E_st,...
    Sigma_cone, Sigma_sl, Sigma_hd,Volume_cone,...
    dof_vol,dof_sd, dof_sl, dof_fo, dof_ch,...
    dof_hd, dof_lc, dof_pan);


% % % % le correnti dark sono quelle all'istante t=0, in posizione 1 dei vettori
% % % curr_cGMP_dark=curr_cGMP(1);
% % % curr_Ca_dark  =curr_Ca(1);
% % % curr_dark=curr_cGMP_dark+curr_Ca_dark;

% calcola il drop
curr_dark=curr_tot(:,1);

drop=100*(1-curr_tot./repmat(curr_dark,1,1+n_step_t/downsample));
drop_r=repmat(curr_dark,1,1+n_step_t/downsample)-curr_tot;
% informativa
[max_drop,~]=max(drop,[],2);
[max_drop_r,I]=max(drop_r,[],2);

time_to_peak=(I-1)*t_fin/n_step_t*downsample;

% informativa
fprintf('\nMaximum drop and corresponding instant, for each sample\n');
disp([max_drop,time_to_peak])

disp([max_drop_r*1e12,time_to_peak])


figure(1)
plot(time_downsample,drop)

% salvataggio delle simulazioni stocastiche in cyto.mat
% saving stochastic simulations in cyto.mat
save('cyto', 'curr_tot', 'drop', 'drop_r', 'max_drop', 'time_to_peak', 'time_downsample')
save('cyto_sol', 'sol', '-v7.3')

% % % % salvataggio del workspace in foto.mat
% % % % saving workspace in foto.mat
% % % save foto

% % % profile viewer

return
