% Programma per la soluzione del problema omogeneizzato della diffusione dei secondi messaggeri 
% nel cytosol del bastoncello con incisure (problema della fototrasduzione)
% Code for solving the homogenized problem of cytosol diffusion of second messengers 
% of rod with incisures (fototransduction problem)
function main_cyto

% % % profile on

% % % % pulizia
% % % % cleaning
 close all;
 clc
% aggiunge alla path i file comuni, gli elementi, ed il problema sul disco
path('../common',path);
path('../elements',path);
path('../id',path);

% legge i dati
[R_b, R_t, H, n_sez, flag_geom_sp, dz_0, ...
    theta_in,theta_fin,...    
    n_sd, Z_sd, ...
    taglia, tol_R, tol_angle, ...
    n_ref_cyto, n_ref_id, metodo_cyto, ~, ...
    solver, theta, alpha, tol_fix, norma_inf, ~, ...
    t_fin, n_step_t, downsample, ...
    plot_mesh, plot_num, ~, ~, inspect, ...
    u_tent, v_tent, tol_stat, ...
    flag_model, ~, flag_Ca_clamp, ...
    ~, ~, ~, ~, ~, ...
    ~, ~, ~, ~, ...
    ~, ~, ~, ...
    ~, ~, ~, ...
    k_hyd, PDE_s, k_st, ...
    ~, ~, ~, ...
    ~, ...
    n_sample, ...
    epsilon_0, nu, sigma, ...
    cc_u, kk_u, cc_v, kk_v, ...
    alpha_max, alpha_min, m_cyc, k_cyc, ...
    flag_ch, B_ca, F, j_cg_max, f_ca, m_cg, K_cg, ...
    j_ex_sat, K_ex]=data;

    
% costruisce la mesh
% mesh construction
[n_pd, n_int_pd, n_tri, n_sl, n_fo,  ...
         sl2pd, fo2pd, pd2int_pd, p_pd, t_pd, ...
         ~, ~, ~, ~, ~, ...
         ~, ~, ~, ~, ~, ...
         Z_s, sd2sez, z_scaling]=...
     genemesh(R_b, R_t, H, theta_in, theta_fin, n_sez, flag_geom_sp, dz_0, ...
     n_sd, Z_sd, ...
     taglia, tol_R, tol_angle, n_ref_cyto, n_ref_id, ...
     plot_mesh, plot_num, inspect);


% annullamento dei flussi al bordo per il calcolo della soluzione stazionaria
% steady-state solution computed by imposing vanishing boundary fluxes
[u_ss,v_ss]=steady_state(R_b, H, nu, epsilon_0, ...
    k_hyd, PDE_s, alpha_max, alpha_min, m_cyc, k_cyc, ...
    B_ca, F, j_cg_max, f_ca, m_cg, K_cg, j_ex_sat, K_ex, ...
    u_tent, v_tent, tol_stat);
disp(['dark concentrations of cGMP and Ca   ',num2str(u_ss), 'uM,  ' num2str(v_ss) ' $uM']);


% gradi di libertà corrispondenti ai nodi del volume, dei dischi speciali, delle incisure, dell'outer shell
% degrees of freedom of the nodes in the volume, special discs, incisures, outer shell
[n_gdl, gdl_vol, gdl_sd, gdl_sl, gdl_fo]=...
    gdl(n_pd, n_int_pd, n_sl, n_fo, ...
    n_sez, n_sd, ...
    sl2pd, fo2pd, pd2int_pd, sd2sez, flag_model, inspect);

% assembla le matrici globali e predispone per l'integrazione nel tempo
% del problema omogeneizzato
[M_vol, M_sd, M_sl, M_fo, M_gl, K_gl, LL, UU, RR, p]=...
    factor(R_b, R_t, H, z_scaling, sd2sez, n_sez, n_sd, ...
    n_pd, n_tri, n_sl, sl2pd, n_fo, fo2pd, ...
    p_pd, t_pd, Z_s, ...
    n_gdl, gdl_vol, gdl_sd, gdl_sl, ...
    t_fin, n_step_t, metodo_cyto, theta, ...
    epsilon_0, nu, sigma, ...
    cc_u, kk_u, cc_v, kk_v);





% legge E_st, densità di fosfodiesterasi per ogni campione aleatorio
% read E_st, PDE* density for every random sample
load('E_st');

% integrazione nel tempo del problema omogeneizzato di diffusione del cGMP e Ca2+ nel citosol
% time integration of the homogenized problem of diffusion of cGMP and Ca2+ in the cytosol
[time, sol, curr_tot]=integrazione_tempo(R_b, R_t, H, theta_in,theta_fin, n_sez, n_sd, ...
    n_pd, n_sl, n_fo, ...
    n_gdl, gdl_vol, gdl_sd, gdl_sl, gdl_fo, ...
    t_fin, n_step_t, downsample, ...
    metodo_cyto, solver, theta, alpha, tol_fix, norma_inf, flag_Ca_clamp, ...
    M_vol, M_sd, M_sl, M_fo, M_gl, K_gl, LL, UU, RR, p, ...
    n_sample, ...
    epsilon_0, nu, ...
    k_hyd, PDE_s, k_st, ...
    alpha_max, alpha_min, m_cyc, k_cyc, ...
    flag_ch, B_ca, F, j_cg_max, f_ca, m_cg, K_cg, ...
    j_ex_sat, K_ex, ...
    u_ss, v_ss, E_st);


size(sol);

% % % % le correnti dark sono quelle all'istante t=0, in posizione 1 dei vettori
% % % curr_cGMP_dark=curr_cGMP(1);
% % % curr_Ca_dark  =curr_Ca(1);
% % % curr_dark=curr_cGMP_dark+curr_Ca_dark;

% calcola il drop
curr_dark=curr_tot(:,1);

drop=100*(1-curr_tot./repmat(curr_dark,1,1+n_step_t/downsample));
drop_r=repmat(curr_dark,1,1+n_step_t/downsample)-curr_tot;
% informativa
[max_drop,~]=max(drop,[],2);
[max_drop_r,I]=max(drop_r,[],2);

time_to_peak=(I-1)*t_fin/n_step_t*downsample;

% informativa
fprintf('\nMaximum drop and corresponding instant, for each sample\n');
disp([max_drop,time_to_peak])

disp([max_drop_r*1e12,time_to_peak])


figure(1)
plot(time_downsample,drop)

% salvataggio delle simulazioni stocastiche in cyto.mat
% saving stochastic simulations in cyto.mat
%save('cyto', 'drop', 'drop_r', 'max_drop', 'time_to_peak', 'time_downsample')
save('cyto', 'time', 'sol', 'curr_tot','drop', 'drop_r', 'max_drop', 'time_to_peak', 'time_downsample')

% % % % salvataggio del workspace in foto.mat
% % % % saving workspace in foto.mat
% % % save foto

% % % profile viewer

return
